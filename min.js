(async()=>{const e=document.createElement("style");e.textContent="\n    :root {\n      --text-color: #000; \n      --background-color: #fff; \n      --input-border-color: #ccc;\n      --button-background-color: #007bff;\n      --button-text-color: #fff;\n      --button-hover-background-color: #0056b3;\n      --description-color: #666;\n      --saved-indicator-color: green;\n    }\n\n    \n    @media (prefers-color-scheme: dark) {\n      :root {\n        --text-color: #fff; \n        --background-color: #333; \n        --input-border-color: #555;\n        --button-background-color: #0056b3; \n        --description-color: #aaa;\n      }\n    }\n\n    .pinecone-modal {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1000;\n      overflow: auto;\n    }\n\n    .pinecone-modal-content {\n      background-color: var(--background-color);\n      padding: 20px;\n      border-radius: 8px;\n      width: 80%;\n      max-width: 500px;\n      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n    }\n\n    .pinecone-config-inputs {\n      overflow-y: auto;\n      max-height: 80vh;\n    }\n\n    .pinecone-input-wrapper {\n        margin-bottom: 15px; \n    }\n\n    .pinecone-input-label {\n      display: block;\n      margin-bottom: 5px;\n      color: var(--text-color);\n      font-weight: bold; \n    }\n\n    .pinecone-input-field {\n      width: 100%;\n      padding: 8px;\n      margin-bottom: 10px;\n      border: 1px solid var(--input-border-color);\n      border-radius: 4px;\n      box-sizing: border-box;\n      color: var(--text-color);\n      background-color: var(--background-color); \n    }\n    \n    .pinecone-input-field::placeholder {\n        color: #999;\n    }\n\n    .pinecone-input-description {\n      font-size: 0.8em;\n      color: var(--description-color);\n      margin-bottom: 10px;\n    }\n\n    .pinecone-saved-indicator {\n      margin-left: 10px;\n      color: var(--saved-indicator-color);\n    }\n\n    .pinecone-button {\n      padding: 10px 15px;\n      border: none;\n      border-radius: 4px;\n      cursor: pointer;\n      transition: background-color 0.3s ease;\n      color: var(--button-text-color);\n    }\n\n    .pinecone-save-button {\n      background-color: var(--button-background-color);\n    }\n\n    .pinecone-save-button:hover {\n      background-color: var(--button-hover-background-color);\n    }\n\n    .pinecone-close-button {\n      background-color: #6c757d;\n      margin-left: 10px;\n    }\n\n    .pinecone-close-button:hover {\n      background-color: #545b62;\n    }\n\n    \n    @media (max-width: 768px) {\n      .pinecone-modal-content {\n        width: 95%; \n      }\n      .pinecone-input-label {\n          font-weight: normal; \n      }\n    }\n  ",document.head.appendChild(e),await o();const n=function(e,n){let t;return function(...o){const a=this;clearTimeout(t),t=setTimeout((()=>e.apply(a,o)),n)}}((function(){const e=document.getElementById("pinecone-host").value,n=document.getElementById("pinecone-api-key").value,t=document.getElementById("pinecone-namespace").value,o=document.getElementById("openai-model").value;let a=document.getElementById("embedding-dimension").value;a||(a="");const c=document.getElementById("openai-api-key").value;localStorage.setItem("saveExtension-pinecone-host",e),localStorage.setItem("saveExtension-pinecone-api-key",n),localStorage.setItem("saveExtension-pinecone-namespace",t),localStorage.setItem("saveExtension-openai-model",o),localStorage.setItem("saveExtension-embedding-dimension",a),localStorage.setItem("saveExtension-pinecone-openai-api-key",c);const i=document.getElementById("config-saved-indicator");i&&(i.textContent="Saved!",i.style.color="green",setTimeout((()=>{i.textContent=""}),2e3))}),500);function t(){let e=document.getElementById("pinecone-config-modal");e&&e.remove();let t=document.createElement("div");t.id="pinecone-config-modal",t.className="pinecone-modal";const c=document.createElement("div");c.className="pinecone-modal-content";const i=document.createElement("div");function r(e,t,o="text",a="",c=!0,r="",s=""){const l=document.createElement("label");l.textContent=e,l.htmlFor=t,l.className="pinecone-input-label";const d=document.createElement("input");d.type=o,d.id=t,d.name=t,d.placeholder=a,d.required=c,d.value=r,d.className="pinecone-input-field",d.addEventListener("input",n);const p=document.createElement("div");if(p.className="pinecone-input-wrapper",p.appendChild(l),p.appendChild(d),s){const e=document.createElement("p");e.textContent=s,e.className="pinecone-input-description",p.appendChild(e)}i.appendChild(p)}i.id="pinecone-config-inputs",i.className="pinecone-config-inputs",r("Pinecone Index Host URL:","pinecone-host","text","your-index-host.pinecone.io",!0,localStorage.getItem("saveExtension-pinecone-host")||"","The URL of your Pinecone index."),r("Pinecone API Key:","pinecone-api-key","password","Your Pinecone API Key",!0,localStorage.getItem("saveExtension-pinecone-api-key")||"","Your Pinecone API key."),r("Namespace:","pinecone-namespace","text","chat01",!0,localStorage.getItem("saveExtension-pinecone-namespace")||"chat01","Specify a namespace for this chat. Use a unique namespace to prevent data conflicts."),r("OpenAI Embedding Model:","openai-model","text","text-embedding-3-small",!0,localStorage.getItem("saveExtension-openai-model")||"text-embedding-3-small","The OpenAI embedding model."),r("Embedding Dimension (Optional):","embedding-dimension","number","",!1,localStorage.getItem("saveExtension-embedding-dimension")||"","The dimension of the embedding vector."),r("OpenAI API Key:","openai-api-key","password","Your OpenAI API Key",!0,localStorage.getItem("saveExtension-pinecone-openai-api-key")||(localStorage.getItem("TM_useAPIKey")?JSON.parse(localStorage.getItem("TM_useAPIKey")):"")||"","Your OpenAI API key.");const s=document.createElement("span");s.id="config-saved-indicator",s.className="pinecone-saved-indicator",i.appendChild(s);const l=document.createElement("button");l.type="button",l.textContent="Save Chat to Pinecone",l.className="pinecone-button pinecone-save-button",l.onclick=()=>{!async function(){try{const e=window.location.hash.match(/#chat=([^&]+)/);if(!e||!e[1])return void alert("No chat selected.");const n=e[1],t=await async function(){return new Promise(((e,n)=>{const t="keyval-store",o=indexedDB.open(t);o.onsuccess=()=>{const n=o.result;e(n)},o.onerror=()=>{n(o.error)}}))}(),c=await async function(e,n){return new Promise(((t,o)=>{const a="keyval",c=e.transaction([a],"readonly"),i=c.objectStore(a),r=`CHAT_${n}`,s=i.get(r);s.onsuccess=()=>{const e=s.result;e?t(e):o(new Error("Chat not found."))},s.onerror=()=>{o(s.error)},c.oncomplete=()=>{e.close()}}))}(t,n),i=c.chatID||c.id||"",r=c.chatTitle||c.title||"Untitled Chat",s=c.messages||c.conversation||[],l={chat_id:i,chatTitle:r,messages:s.map(((e,n)=>({message_number:n,content:e.content,createdAt:e.createdAt,role:e.role,chat_id:i})))},d=await async function(e){try{await o();const t=localStorage.getItem("saveExtension-pinecone-openai-api-key"),c=localStorage.getItem("saveExtension-openai-model"),i=localStorage.getItem("saveExtension-embedding-dimension");if(!t||!c)throw new Error("OpenAI API key and model must be configured.");const r=function(e){switch(e){case"text-embedding-ada-002":return"cl100k_base";case"text-embedding-3-small":case"text-embedding-3-large":return"o200k_base";default:throw new Error(`Unsupported embedding model: ${e}`)}}(c),s=await async function(e){const n=await fetch(`https://tiktoken.pages.dev/js/${e}.json`);if(!n.ok)throw new Error(`Failed to fetch encoding: ${n.status} ${n.statusText}`);return await n.json()}(r),l=new Tiktoken(s),d=e.messages,p=[],m=1;let u=[],g=0,h=[];const b={},f=8191,y=50,v=.1;function n(e){return new Blob([e]).size}for(const x of d){const w="string"==typeof x.content?x.content:JSON.stringify(x.content);let k=b[w];void 0===k&&(k=l.encode(w).length,b[w]=k);const E={chat_id:x.chat_id,message_number:x.message_number,role:x.role,content:x.content},I=n(JSON.stringify(E)),S=Math.max(y,v*I);if(g+k>f-S&&u.length>0){const C=await a(u,t,c,i);p.push(...C),h=u.slice(-m),u=[...h],g=h.reduce(((e,n)=>{const t="string"==typeof n.content?n.content:JSON.stringify(n.content);let o=b[t];return void 0===o&&(o=l.encode(t).length,b[t]=o),e+o}),0)}u.push({...x,content:w}),g+=k}if(u.length>0){const N=await a(u,t,c,i);p.push(...N)}return p}catch(P){throw P}}(l);await async function(e){try{let n=localStorage.getItem("saveExtension-pinecone-host");const t=localStorage.getItem("saveExtension-pinecone-api-key"),o=localStorage.getItem("saveExtension-pinecone-namespace");if(!n||!t||!o)throw new Error("Pinecone host, API key, and namespace must be configured.");n=n.replace(/^https?:\/\//,"");const a=`https://${n}/vectors/upsert`,c=1e3;for(let n=0;n<e.length;n+=c){const i={vectors:e.slice(n,n+c),namespace:o},r=await fetch(a,{method:"POST",headers:{"Api-Key":t,"Content-Type":"application/json"},body:JSON.stringify(i)});if(!r.ok){const e=await r.json();throw new Error(`Pinecone API error: ${r.status} ${r.statusText} - ${JSON.stringify(e)}`)}}alert("Chat data saved to Pinecone successfully!")}catch(e){console.error("Error in upsertToPinecone:",e),alert("An error occurred while upserting data to Pinecone: "+e.message)}}(d)}catch(e){console.error("Error in getAndProcessChatData:",e),alert("An error occurred while processing and saving chat data: "+e.message)}}(),t.remove()},i.appendChild(l);const d=document.createElement("button");d.type="button",d.textContent="Close",d.className="pinecone-button pinecone-close-button",d.onclick=()=>{t.remove()},i.appendChild(d),c.appendChild(i),t.appendChild(c),document.body.appendChild(t)}async function o(){if("undefined"==typeof Tiktoken)return new Promise((async(e,n)=>{try{const{Tiktoken:n}=await import("https://esm.sh/js-tiktoken@1.0.19/lite");window.Tiktoken=n,e()}catch(e){n(new Error("Failed to load js-tiktoken library: "+e))}}))}async function a(e,n,t,o){const a={input:e.map((e=>{let n="string"==typeof e.content?e.content:JSON.stringify(e.content);return""===n.trim()&&(n=" "),n})),model:t};o&&(a.dimensions=parseInt(o,10));const c=await fetch("https://api.openai.com/v1/embeddings",{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(a)});if(!c.ok){const e=await c.json();throw new Error(`OpenAI API error: ${c.status} ${c.statusText} - ${JSON.stringify(e)}`)}return(await c.json()).data.map(((n,t)=>{const o=e[n.index];return{id:`${o.chat_id}-message${o.message_number}`,values:n.embedding,metadata:{chat_id:o.chat_id,message_number:o.message_number,role:o.role,content:o.content}}}))}!function(){const e=document.querySelector('button[data-element-id="workspace-tab-settings"]');if(!e)return void console.warn("Settings button not found.");const n=e.closest("div");if(!n)return void console.warn("Button container not found.");const o=document.createElement("button");o.setAttribute("data-element-id","workspace-tab-save-to-pinecone"),o.style.color=window.getComputedStyle(n).color,o.style.fontFamily=window.getComputedStyle(n).fontFamily,o.style.alignItems="center",o.className=e.className;const a=document.createElement("span");a.className=e.querySelector("span").className;const c=document.createElement("span"),i=e.querySelector("span > svg");c.className=i?i.className:"w-4 h-4 flex-shrink-0",c.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 64 64" fill="currentColor" class="w-4 h-4 flex-shrink-0"><path d="M31 48V3M16 20L31 3l15 16" stroke-width="4" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" fill="none"/><path d="M8 46v16h46V46" stroke-width="4" stroke-miterlimit="10" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" fill="none"/></svg>';const r=document.createElement("span"),s=e.querySelector("span > span");r.className=s?s.className:"font-normal self-stretch text-center text-xs leading-4 md:leading-none",r.textContent="Save",a.appendChild(c),a.appendChild(r),o.appendChild(a),o.onclick=()=>{t()},e.parentElement.insertBefore(o,e.nextSibling)}()})();
